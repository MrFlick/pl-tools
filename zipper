#!/usr/bin/perl
use warnings FATAL => 'all';

=head1 NAME

zipper - matches up two sorted files based on multiple columns
(like the C<join> command but with more than one field)

=head1 SYNOPSIS

zipper --in datafile --zip zipfile [--exclude] 
    [--keys 0,1] [--inkeys 0,1] [--zipkeys 0,1] [--sep '\t']
    [--out STDOUT] [--help] [--man]

=head1 DESCRIPTION

zipper will allow you to filter the values of one file to those
that match values in another file. You can specify the fields
to use for matching. Note that files must be sorted by the fields
you use for filtering. By default, only lines matching the filter
are returned, but you can get the compliment with C<--exclude>.

=head1 AUTHOR

Matthew Flickinger (mflick@umich.edu)

=cut

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Scalar::Util 'looks_like_number';

my $infile = "";
my $inkeys = "";
my $zipfile = "";
my $zipkeys = "";
my $mode = "lookup";
my $keys = "";
my $fields = "";
my $exclude = 0;
my $infields = "";
my $zipfields = "";
my $hasinheader = 1;
my $haszipheader = 1;
my $printoutheader = 0;
my $sorttype = "";
my $outfile = "-";
my $sep = "";
my $comment = "#";
my ($help, $man) = (0,0);

GetOptions("in=s" => \$infile,
    "inkeys=s" => \$inkeys,
    "zip=s" => \$zipfile,
    "zipkeys=s" => \$zipkeys,
    "keys=s" => \$keys,
    "fields=s" => \$fields,
    "mode=s" => \$mode,
    "infields=s" => \$infields,
    "zipfields=s" => \$zipfields,
    "inheader!" => \$hasinheader,
    "zipheader!" => \$haszipheader,
    "outheader!" => \$printoutheader,
    "exclude" => \$exclude,
    "sort=s" => \$sorttype,
    "out=s" => \$outfile,
    "sep=s" => \$sep,
    "comment=s" => \$comment,
    "help|?" => \$help,
    "man" => \$man
);

pod2usage(-exitstatus => 0, -verbose=>2) if $man;
pod2usage(-verbose => 1) if $help || !$zipfile;

cleanFileName(\$infile,\$inkeys,\$infields, $keys, $fields);
cleanFileName(\$zipfile,\$zipkeys,\$zipfields, $keys, $fields);

if ($infile = $infile || shift @ARGV) {
    open(FIN, "<$infile") or die("cannot open $infile ($!), stopped");
} elsif (!(-t STDIN)) {
    open(FIN, "-");
}  else {
    pod2usage(-verbose => 1);
}

open(LIN, "<$zipfile") or die("cannot open $zipfile ($!), stopped");
open(FOUT, ">$outfile") or die("cannot open $outfile ($!), stopped");

my (@inkeys, @infields, @zipkeys, @zipfields);


if ($mode eq "sorted") {
    my @data = getNextLine(*FIN);
    my @filter = getNextLine(*LIN);

    findKeys(\@inkeys, \@zipkeys,\@data, \@filter, $inkeys, $zipkeys, $hasinheader, $haszipheader);

    my @sorttype = getSortType($sorttype, [@data[@inkeys]], [@filter[@zipkeys]]);

    while(@data && @filter) {
        my $comp = compFields(\@sorttype, @data[@inkeys], @filter[@zipkeys]);
        if ($comp<0) {
            print FOUT join("\t", @data), "\n" if $exclude;
            @data = getNextLine(*FIN);
        } elsif ($comp==0) {
            print FOUT join("\t", @data, @filter[@zipfields]), "\n" if !$exclude;
            @data = getNextLine(*FIN);
            @filter = getNextLine(*LIN);
        } else {
            @filter = getNextLine(*LIN);
        }
    }

} elsif ($mode eq "lookup") {
    my (@data, @filter);
    my %lookup;

    @data = getNextLine(*LIN) if $hasinheader;
    @filter = getNextLine(*FIN) if $haszipheader;
    
    findKeys(\@inkeys, \@zipkeys,\@data, \@filter, $inkeys, $zipkeys, $hasinheader, $haszipheader);
    findFields(\@infields, \@zipfields,\@data, \@filter, $infields, $zipfields, $hasinheader, $haszipheader);
    
    while( @filter=getNextLine(*LIN) ) {
        my $key = join("\t", @filter[@zipkeys]);
        if (@zipfields) {
            $lookup{$key}  = [join("\t", @filter[@zipfields])];
        } else {
            $lookup{$key} = [];
        }
    }

    while( @data = getNextLine(*FIN) ) {
        my $key = join("\t", @data[@inkeys]);
        if (exists $lookup{$key} xor $exclude ) {
            my @m;
            @m = @{$lookup{$key}} if exists $lookup{$key};
            print FOUT join("\t", @data, @m), "\n";
        }
    }
} else {
    print STDERR "Unknown mode: $mode\n";
}

close(FOUT);
close(LIN);
close(FIN);

sub cleanFileName {
    my $filenameRef = shift;
    my $keyRef = shift;
    my $fieldRef = shift;
    my $keys = shift;
    my $fields = shift;
    
    if ($$filenameRef =~ s/\[([^\[].*)\]$//) {
        my @c = split(";", $1, -1);
        $$keyRef = $$keyRef || $keys || $c[0];
        $$fieldRef = $$fieldRef || ".".$fields || $c[1] || "." if @c==2;
    }
}

sub findKeys {
    my ($inIdxRef, $zipIdxRef, $inRef, $zipRef, $inkeys, $zipkeys, $inheader, $zipheader) = @_;

    my (%inlookup, %ziplookup);
    %inlookup = map{$inRef->[$_]=> $_} 0..$#$inRef if $inheader;
    %ziplookup = map{$zipRef->[$_]=> $_} 0..$#$zipRef if $zipheader;

    if($inkeys eq "" and $zipkeys eq "") {
        if ($inheader && $zipheader) {
            my $overlap=0;
            for(my $i=0; $i<=$#$zipRef; $i++) {
                if ( exists($inlookup{$zipRef->[$i]}) ) {
                        $overlap++;
                        push @$inIdxRef, $inlookup{$zipRef->[$i]};
                        push @$zipIdxRef, $i;
                }
            }
            if ($overlap==0) {
                print STDERR "ERROR: No matching columns found\n";
                print STDERR "in columns: [", join("][", @$inRef), "]\n";
                print STDERR "zip columns: [", join("][", @$zipRef), "]\n";
                die ("try specifying names via --[in/zip]keys, stopped");
            }
        } else {
            die("both headers must be present to infer key columns or you must specify --keys, stopped");
        }
    } else {
        $inkeys = $inkeys || $zipkeys;
        $zipkeys = $zipkeys || $inkeys;
        push @$inIdxRef, translateKeys(\%inlookup, [split(",", $inkeys)]);
        push @$zipIdxRef, translateKeys(\%ziplookup, [split(",", $zipkeys)]);
    }
}

sub findFields {
    my ($inIdxRef, $zipIdxRef, $inRef, $zipRef, $infields, $zipfields, $inheader, $zipheader) = @_;

    my (%inlookup, %ziplookup);
    %inlookup = map{$inRef->[$_]=> $_} 0..$#$inRef if $inheader;
    %ziplookup = map{$zipRef->[$_]=> $_} 0..$#$zipRef if $zipheader;

    if ($infields eq "") {
        push @$inIdxRef, 0..$#$inRef;
    } elsif ($infields =~ s/^\.//) {
        push @$inIdxRef, translateKeys(\%inlookup, [split(",", $infields)], 0);
    } else {
        push @$inIdxRef, translateKeys(\%inlookup, [split(",", $infields)]);
    }
    if ($zipfields eq "") {
        push @$zipIdxRef, 0..$#$zipRef;
    } elsif ($zipfields =~ s/^\.//) {
        push @$zipIdxRef, translateKeys(\%ziplookup, [split(",", $zipfields)], 0);
    } else {
        push @$zipIdxRef, translateKeys(\%ziplookup, [split(",", $zipfields)]);
    }
}

sub translateKeys {
    my $idxRef = shift;
    my $keysRef = shift;
    my $failonnotfound = shift || 1;

    my @b;

    for(my $i=0; $i<=$#$keysRef; $i++) {
        if(exists($idxRef->{$keysRef->[$i]})) {
            push @b,  $idxRef->{$keysRef->[$i]};
        } elsif ($keysRef->[$i] =~ m/^\d+\z/i && $keysRef->[$i]>0 && 
                (!(keys %$idxRef) || $keysRef->[$i] < keys %$idxRef)) {
            push @b, $keysRef->[$i]-1;
        } elsif($failonnotfound) {
            print STDERR "unable to parse \"", join(",",@$keysRef), "\"";
            print STDERR "; \"$keysRef->[$i]\" could not be translated\n";
            print STDERR "known column names: [", join("][", keys %$idxRef), "]\n", if keys %$idxRef;
            die("stopped");
        }
    }

    return @b;
}

sub getSortType {
    my ($sorttype, $dataRef, $filterRef) = @_;
    my @sorttype;
    if ($sorttype) {
        @sorttype = split(",", lc $sorttype);
        die("sorted count (". @sorttype . 
            ") does not match key count (".@$dataRef.")") if @sorttype != @$dataRef;
    } else {
        for(my $i=0; $i<@{$dataRef}; $i++) {
            if (looks_like_number($dataRef->[$i]) &&
                looks_like_number($filterRef->[$i])) {
                push @sorttype, "n";
            } else {
                push @sorttype, "c";
            }
        }
    }
    return @sorttype;
}

sub getNextLine {
    my $fh = shift;
    my $line = <$fh>;
    while($line && $line =~ /^$comment/) {$line = <$fh>;}
    if ($line) {
        chomp($line);
        if (!$sep) {
            return split(" ", $line);
        } else {
            return split($sep, $line);
        }
    } else {
        return split("","");
    }
}

sub compFields {
    my $sorttypeRef = shift @_;
    my @fields = @_;
    my $fc = scalar(@fields)/2;
    for (my $i=0; $i<$fc; $i++) {
        if (@$sorttypeRef && $sorttypeRef->[$i] eq "n") {
            if($fields[$i] != $fields[$i+$fc]) {
                return $fields[$i] <=> $fields[$i+$fc];
            }
        } else {
            if($fields[$i] ne $fields[$i+$fc]) {
                return $fields[$i] cmp $fields[$i+$fc];
            }
        }
    }
}
