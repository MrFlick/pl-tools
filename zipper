#!/usr/bin/perl
use warnings FATAL => 'all';

=head1 NAME

zipper - merges (possibly sorted) files based on multiple columns

=head1 SYNOPSIS

zipper --zip zipfile [--in datafile] [--mode "lookup"] [--exclude] 
    [--keys keys] [--inkeys keys] [--zipkeys keys]
    [--fields flds] [--infields flds] [--zipfields flds]
    [--(no)header] [--(no)inheader] [--(no)zipheader] [--(no)outheader]
	[--no-merge] [--missing vals]
    [--stats] [--sep '\t'] [--out STDOUT] [--help] [--man] [datafile]

=head1 DESCRIPTION

zipper will allow you to merge two files. The default is to 
load the zip file into memory and to join to the input file based
on matching column names. If both files are sorted, C<--mode sorted>
will be more efficient because it does not read the file into memory.

=head2 OPTIONS

=over 4

=item B<--zip>

This is the only required parameter. If using the default mode
of "lookup", the zip file is read into memory first, so this should 
be the smaller of the two files.

=item B<--in>

You may specify a datafile via this parameter. You may also pipe data
into stdin or list a file name as a trailing parameter.

=item B<--mode>

The default mode is "lookup" which essentially reads the zip file into
memory and uses it as a lookup table to match data to the datafile.
The other option is "sorted" which assumeds both files are sorted by the
keys used to match them. This mode is more efficient because the files are 
processed line by line and are not read into memory.

=item B<--exclude>

The default action is to only include lines from the datafile that have
matches in the zipfile. This option will do the opposite and only return
rows from the datafile that are not in the zip file.

=item B<--keys>, B<--inkeys>, B<--zipkeys>

The C<--keys> parameter is a comma separated list of the columns that should
be used to match up the two files. These can either be names of the columns
from the header (if one is supplied) or the 1-based index of the columns. If
the keys have different names or positions in the datafile and zipfile, you
can specify them individually with the C<--inkeys> and C<--zipkeys> parameters.
If left unspecified, and both files have a header, then the files will automatically
be joined on the shared columns.

=item B<--fields>, B<--infields>, B<--zipfields>

Wile the C<--keys> parameter specifies how to match up two files, the C<--fields>
paramter allows you to specify additional non-key columns that you would like to be
returned from the input files. Again this can be a comma-separated list of either field
names from the header, or 1-based column indexes.

=item B<--header>, B<--noheader>, B<--inheader>, B<--zipheader>

The C<--header> parameter indicates whether the input files had a header line
which gives the name of each of the columns. If they do not have headers, you can
pass C<--noheader>. If left unspecified, the program will guess if there are headers
based on the values of C<--keys> and C<--fields>. If you only specify integer values,
we assume no header, otherwise we assume there is a header. You can set different
options for the datafile and zip file using C<--inheader>, C<--noinheader>, 
C<--zipheader>, and C<--nozipheader>.

=item B<--outheader>, B<--nooutheader>

Indicates whether or not you would like to copy the column header names
to your output. The default is to write headers if one or more of the datafile
or zipfile has a header.

=item B<--no-merge>

By default, the non-key fields from the zip file are merged into the output. If 
you want to supress the merging and only choose records with matching keys, use
this option

=item B<--missing>

By default if a record does not have a match in the zip file, no output is returned.
However, if you specify a <C--missing> value, this value will be returned for all
zip fields for in file records without a match in the zip file. You can specify a comma
delimited list of missing values to get a different missing values for each zip field.

=item B<--stats>

(Experimental) Writes out some basic statistics about how many lines were read
and matched from each file

=item B<--sep>

The field separater for the input files. Defaults to white space.

=item B<--out>

By default the results will go to standard out, but you can redirect to a file
by specifying a file name with C<--out filename.txt>.

=item B<--help>

Prints a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head2 NOTES

It is important to choose the correct mode. The default C<--mode lookup> will read all of the 
zip file into memory and then process the data file libe by line. However, if your
files are very large and are sorted already, then using C<--mode sorted> will read
though both files simultaneously without using much memory. The sorted mode is good
for larger files like BAM and VCF files.

In addition to the C<--keys> and C<--fields> options, you can also specify
these parameters in a shorthand filename syntax. Innediately following the file
name, you can add brackets containing the keys, and optionally a semicolon with the
fields you want from that file. Since brackets are often interpreted by the shell, you
must escape them or place the file name in quotes. For example:
C<--zip 'lookup.txt[fam,iid;height]' --in 'data.ped[fam,iid]'>. If you don't specify
fields, all will be returned, but if you put in a semicolon followed by nothing, no
additional fields are returned.

Note that the order of the returned fields will always have the fields from the data file
first, then the zip file.

=head1 EXAMPLES

Consider a sample data file pheno.txt
    fid iid visit   pulse
    1   1   1   72
    1   1   2   75
    1   2   1   71
    1   2   2   72
    2   1   1   70
    2   3   1   68

and a file subjects.txt 
    fid iid name    age sex
    1   1   Adam    25  M
    2   1   Charity 22  F
    2   3   Dave    14  M

We can merge these two files with 
    C<zipper --zip subjects.txt pheno.txt>

which will return 
    fid     iid     visit   pulse   name    age     sex
    1       1       1       72      Adam    25      M
    1       1       2       75      Adam    25      M
    2       1       1       70      Charity 22      F
    2       3       1       68      Dave    14      M

Here the two files were automatically joined on fid and iid since they 
had the same name in both files.

If we wanted a list of all the phenotype observations which didn't
have a corresponding subject, we could use
    C<zipper --zip subjects.txt pheno.txt --exclude>

If we prefer to use indexes, we could do that. However, when we use indexes
C<zipper> assumes there are no headers so we will have to tell the program 
that headers do exist with
    C<zipper --zip subjects.txt --keys 1,2 --header pheno.txt>

If we only wanted the sex and visit number in addition to the keys
we could write
    C<zipper --zip subjects.txt --fields "iid,fid,sex,visit" pheno.txt>


=head1 AUTHOR

Matthew Flickinger (mflick@umich.edu)

=cut

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Scalar::Util 'looks_like_number';

my $infile = "";
my $inkeys = "";
my $zipfile = "";
my $zipkeys = "";
my $mode = "lookup";
my $keys = "";
my $fields = "";
my $exclude = 0;
my $infields = "";
my $zipfields = "";
my $hasheader;
my $hasinheader;
my $haszipheader;
my $printoutheader;
my $sorttype = "";
my $outfile = "-";
my $sep = "";
my $comment = "#";
my $domerge = 1;
my $missing = undef;
my $stats = 0;
my ($help, $man) = (0,0);

GetOptions("in=s" => \$infile,
    "inkeys=s" => \$inkeys,
    "zip=s" => \$zipfile,
    "zipkeys=s" => \$zipkeys,
    "keys=s" => \$keys,
    "fields=s" => \$fields,
    "mode=s" => \$mode,
    "infields=s" => \$infields,
    "zipfields=s" => \$zipfields,
    "header!" => \$hasheader,
    "inheader!" => \$hasinheader,
    "zipheader!" => \$haszipheader,
    "outheader!" => \$printoutheader,
	"merge!" => \$domerge,
	"missing=s" => \$missing,
    "exclude" => \$exclude,
    "sort=s" => \$sorttype,
    "out=s" => \$outfile,
    "sep=s" => \$sep,
    "comment=s" => \$comment,
    "stats" => \$stats,
    "help|?" => \$help,
    "man" => \$man
);

pod2usage(-exitstatus => 0, -verbose=>2) if $man;
pod2usage(-verbose => 1) if $help || !$zipfile;

$infile = $infile || shift @ARGV || "";

cleanFileName(\$infile,\$inkeys,\$infields, $keys, $fields);
cleanFileName(\$zipfile,\$zipkeys,\$zipfields, $keys, $fields);

$hasinheader = defined($hasinheader) ? $hasinheader : 
    defined($hasheader) ? $hasheader :
    !looksLikeIndexes(split(",",$inkeys), split(",",$infields)); 
$haszipheader = defined($haszipheader) ? $haszipheader : 
    defined($hasheader) ? $hasheader :
    !looksLikeIndexes(split(",",$zipkeys), split(",",$zipfields)); 
$printoutheader = defined($printoutheader) ? $printoutheader :
    $hasinheader || $haszipheader;

if ($infile) {
    open(FIN, "<$infile") or die("cannot open $infile ($!), stopped");
} elsif (!(-t STDIN)) {
    open(FIN, "-");
}  else {
    pod2usage(-verbose => 1);
}

open(LIN, "<$zipfile") or die("cannot open $zipfile ($!), stopped");
open(FOUT, ">$outfile") or die("cannot open $outfile ($!), stopped");

my (@inkeys, @infields, @zipkeys, @zipfields, @innames, @zipnames);
my ($inlines, $ziplines, $inzipmatches) =(0,0,0);

if ($mode eq "sorted") {
    my @data = getNextLine(*FIN);
    my @filter = getNextLine(*LIN);

    findKeys(\@inkeys, \@zipkeys,\@data, \@filter, $inkeys, $zipkeys, $hasinheader, $haszipheader);
    findFields(\@infields, \@zipfields,\@innames, \@zipnames, \@data, \@filter, 
        $infields, $zipfields, $hasinheader, $haszipheader, \@inkeys, \@zipkeys);
	if (!$domerge) {
		@zipfields = ();
		@zipnames = ();
	}

	my ($useMissing, $missingValRef) = parseMissingOption($missing, \@zipfields);
    @data = getNextLine(*FIN) if $hasinheader;
    @filter = getNextLine(*LIN) if $haszipheader;

    my @sorttype = getSortType($sorttype, [@data[@inkeys]], [@filter[@zipkeys]]);

    while(@data && @filter) {
        my $comp = compFields(\@sorttype, @data[@inkeys], @filter[@zipkeys]);
        if ($comp<0) {
			if ($useMissing) {
				print FOUT join("\t", @data, @$missingValRef), "\n";
			} elsif ($exclude) {
				print FOUT join("\t", @data), "\n";
			}
            $inlines++;
            @data = getNextLine(*FIN);
        } elsif ($comp==0) {
			print FOUT join("\t", @data, @filter[@zipfields]), "\n" if !$exclude;
            $inlines++;
            @data = getNextLine(*FIN);
            #@filter = getNextLine(*LIN);
        } else {
            $ziplines++;
            @filter = getNextLine(*LIN);
        }
    }

} elsif ($mode eq "lookup") {
    my (@data, @filter);
    my %lookup;

    @data = getNextLine(*FIN);
    @filter = getNextLine(*LIN);

    findKeys(\@inkeys, \@zipkeys,\@data, \@filter, 
        $inkeys, $zipkeys, $hasinheader, $haszipheader);
    findFields(\@infields, \@zipfields,\@innames, \@zipnames, \@data, \@filter, 
        $infields, $zipfields, $hasinheader, $haszipheader, \@inkeys, \@zipkeys);
	if (!$domerge) {
		@zipfields = ();
		@zipnames = ();
	}

	my ($useMissing, $missingValRef) = parseMissingOption($missing, \@zipfields);
    @data = getNextLine(*FIN) if $hasinheader;
    @filter = getNextLine(*LIN) if $haszipheader;

    while( @filter ) {
        $ziplines++;
        my $key = join("\t", @filter[@zipkeys]);
        if (@zipfields) {
            $lookup{$key}  = [join("\t", @filter[@zipfields])];
        } else {
            $lookup{$key} = [];
        }
        @filter = getNextLine(*LIN);
    }

    print FOUT join("\t", @innames, @zipnames), "\n" if $printoutheader;
    while( @data ) {
        $inlines++;
        my $key = join("\t", @data[@inkeys]);
        if ((exists $lookup{$key} | $useMissing) xor $exclude ) {
            my @m;
            push @m, @data[@infields] if @infields;
			if (exists $lookup{$key}) {
				$inzipmatches++;
				push @m, @{$lookup{$key}}
			} else {
				$inzipmatches+=$exclude;
				push @m, @$missingValRef;
			}
            print FOUT join("\t", @m), "\n";
        }
        @data = getNextLine(*FIN);
    }
} else {
    print STDERR "Unknown mode: $mode\n";
}

if($stats) {
    print "#stats {inlines:$inlines, ziplines:$ziplines, matches:$inzipmatches}\n";
}
close(FOUT);
close(LIN);
close(FIN);

sub cleanFileName {
    my $filenameRef = shift;
    my $keyRef = shift;
    my $fieldRef = shift;
    my $keys = shift;
    my $fields = shift;
    
    if ($$filenameRef =~ s/\[([^\[].*)\]$//) {
        my @c = split(";", $1, -1);
        $$keyRef = $$keyRef || $c[0] || $keys;
        $$fieldRef = $$fieldRef || $c[1] || "." if @c==2;;
    }
    $$keyRef = $$keyRef || $keys;
    $$fieldRef = $$fieldRef || ".".$fields if $fields;
}

sub findKeys {
    my ($inIdxRef, $zipIdxRef, $inRef, $zipRef, $inkeys, $zipkeys, $inheader, $zipheader) = @_;

    my (%inlookup, %ziplookup);
    %inlookup = map{$inRef->[$_]=> $_} 0..$#$inRef if $inheader;
    %ziplookup = map{$zipRef->[$_]=> $_} 0..$#$zipRef if $zipheader;

    if($inkeys eq "" and $zipkeys eq "") {
        if ($inheader && $zipheader) {
            my $overlap=0;
            for(my $i=0; $i<=$#$zipRef; $i++) {
                if ( exists($inlookup{$zipRef->[$i]}) ) {
                        $overlap++;
                        push @$inIdxRef, $inlookup{$zipRef->[$i]};
                        push @$zipIdxRef, $i;
                }
            }
            if ($overlap==0) {
                print STDERR "ERROR: No matching columns found\n";
                print STDERR "in columns: [", join("][", @$inRef), "]\n";
                print STDERR "zip columns: [", join("][", @$zipRef), "]\n";
                die ("try specifying names via --[in/zip]keys, stopped");
            }
        } else {
            die("both headers must be present to infer key columns or you must specify --keys, stopped");
        }
    } else {
        $inkeys = $inkeys || $zipkeys;
        $zipkeys = $zipkeys || $inkeys;
        push @$inIdxRef, translateKeys(\%inlookup, [split(",", $inkeys)]);
        push @$zipIdxRef, translateKeys(\%ziplookup, [split(",", $zipkeys)]);
    }
}

sub findFields {
    my ($inIdxRef, $zipIdxRef, $inNameRef, $zipNameRef, $inRef, $zipRef, $infields, $zipfields, $inheader, $zipheader, $inkeysRef, $zipkeysRef) = @_;

    my (%inlookup, %ziplookup);
    %inlookup = map{$inRef->[$_]=> $_} 0..$#$inRef if $inheader;
    %ziplookup = map{$zipRef->[$_]=> $_} 0..$#$zipRef if $zipheader;

    if ($infields eq "") {
        push @$inIdxRef, (0..$#$inRef);
    } elsif ($infields =~ s/^\.//) {
        push @$inIdxRef, translateKeys(\%inlookup, [split(",", $infields)], 0);
    } else {
        push @$inIdxRef, translateKeys(\%inlookup, [split(",", $infields)]);
    }

    my %alreadyincluded;
    foreach (@$inIdxRef) {
        if ($inheader && $zipheader) {
            $alreadyincluded{ $ziplookup{ $inRef->[$_] } }=1 if exists $ziplookup{ $inRef->[$_] };
        } else {
            my $ai = arrayIndex($_, @$inkeysRef);
            if ($ai > -1) {
                    $alreadyincluded{$zipkeysRef->[$ai]} = 1;
            }
        }
    }

    if ($zipfields eq "") { 
        for (my $i=0; $i<@$zipRef; $i++) {
            push (@$zipIdxRef, $i) if !exists($alreadyincluded{$i});
        }
    } else  {
        my @f;
        if ($zipfields =~ s/^\.//) {
            @f = translateKeys(\%ziplookup, [split(",", $zipfields)], 0);
        } else {
            @f = translateKeys(\%ziplookup, [split(",", $zipfields)]);
        }
        foreach (@f) {
            push (@$zipIdxRef, $_) if !exists($alreadyincluded{$_});
        }
    }

    if ($inheader) {
        push (@$inNameRef, map{$inRef->[$_]} @$inIdxRef);
    } else {
        push (@$inNameRef, map{"IN".($_+1)} @$inIdxRef);
    }
    if ($zipheader) {
        push (@$zipNameRef, map{$zipRef->[$_]} @$zipIdxRef);
    } else {
        push (@$zipNameRef, map{"ZIP".($_+1)} @$zipIdxRef);
    }
}

sub translateKeys {
    my $idxRef = shift;
    my $keysRef = shift;
    my $failonnotfound = shift;
    $failonnotfound = 1 if !defined $failonnotfound;

    my @b;

    for(my $i=0; $i<=$#$keysRef; $i++) {
        if(exists($idxRef->{$keysRef->[$i]})) {
            push @b,  $idxRef->{$keysRef->[$i]};
        } elsif ($keysRef->[$i] =~ m/^\d+\z/i && $keysRef->[$i]>0 && 
                (!(keys %$idxRef) || $keysRef->[$i] < keys %$idxRef)) {
            push @b, $keysRef->[$i]-1;
        } elsif($failonnotfound) {
            print STDERR "unable to parse \"", join(",",@$keysRef), "\"";
            print STDERR "; \"$keysRef->[$i]\" could not be translated\n";
            print STDERR "known column names: [", join("][", keys %$idxRef), "]\n", if keys %$idxRef;
            die("stopped");
        }
    }

    return @b;
}

sub looksLikeIndexes {
    my $ret=0;
    sub isposint {no warnings;return $_[0] eq ($_[0]+0) && $_[0] == int($_[0]) && $_[0]>0}
    foreach my $a (@_) {
        if(ref($a) eq "ARRAY") {
            for my $b (@$a) {
               if (!isposint($b)) {return 0};
                $ret = 1;
            }
        } else {
            if (!isposint($a)) {return 0};
            $ret = 1;
        }
    }
    return $ret;
}

sub parseMissingOption {
	my $missing = shift;
	my $zipFieldRef = shift;
	if(defined $missing) {
		my @missingvalues = split(",",$missing);
		@missingvalues = ("") if !@missingvalues;
		my $zipCount = scalar(@$zipFieldRef);
		my $missCount = scalar(@missingvalues);
		while(@missingvalues < $zipCount) {
			push @missingvalues, $missingvalues[scalar(@missingvalues) % $missCount];
		}
		if (@missingvalues > $zipCount) {
			splice @missingvalues, $zipCount;
		}
		return 1, \@missingvalues;
	} else {
		return 0, [];
	}
}

sub getSortType {
    my ($sorttype, $dataRef, $filterRef) = @_;
    my @sorttype;
    if ($sorttype) {
        @sorttype = split(",", lc $sorttype);
        die("sorted count (". @sorttype . 
            ") does not match key count (".@$dataRef.")") if @sorttype != @$dataRef;
    } else {
        for(my $i=0; $i<@{$dataRef}; $i++) {
            if (looks_like_number($dataRef->[$i]) &&
                looks_like_number($filterRef->[$i])) {
                push @sorttype, "n";
            } else {
                push @sorttype, "c";
            }
        }
    }
    return @sorttype;
}

sub getNextLine {
    my $fh = shift;
    my $line = <$fh>;
    while($line && $line =~ /^$comment/) {$line = <$fh>;}
    if ($line) {
        chomp($line);
        if (!$sep) {
            return split(" ", $line);
        } else {
            return split($sep, $line);
        }
    } else {
        return split("","");
    }
}

sub compFields {
    my $sorttypeRef = shift @_;
    my @fields = @_;
    my $fc = scalar(@fields)/2;
    for (my $i=0; $i<$fc; $i++) {
        if (@$sorttypeRef && $sorttypeRef->[$i] eq "n") {
            if($fields[$i] != $fields[$i+$fc]) {
                return $fields[$i] <=> $fields[$i+$fc];
            }
        } else {
            if($fields[$i] ne $fields[$i+$fc]) {
                return $fields[$i] cmp $fields[$i+$fc];
            }
        }
    }
}

sub arrayIndex(@)
{        
     1 while $_[0] ne pop; $#_;
}
