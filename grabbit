#!/usr/bin/perl -w

=head1 NAME

grabbit - a utility for displaying choosen records from a delimited text file

=head1 SYNOPSIS

grabbit [--first] [--where filter] [--select columns] [--lines datalines] 
[--rename columns] [--random number] [--sep] [--comment] [--keepcomments] 
[--format] [--help] [--man] file ...

=head1 DESCRIPTION

grabbit will allow you to extract and view lines from a text file.
grabbit will read the column headers in the file so you can search
using column names using the C<--where> option (ie C<--where gender=M>).
You can also choose lines to return by line number with C<--lines>
or choose a random sample with C<--random>. You can select a subset
of columns with C<--select> and rename them with C<--rename>.
If only one record matches your filter,
by default the record is displayed with each column value and its header
on a separate line so can you easily see what's in each column.

=head2 OPTIONS

=over 4

=item B<--first>

If you set this flag, the program will stop searching after it finds
the first matching record. This is a good way to quickly see what is
in a file.

=item B<--where>

Filter which rows are returned by specifying C<column=value>. 
Currently only this simple filter is supported. The column names 
come from the header line of the file.

=item B<--select>

A comma seperated list of the columns you wish to view from the
file. Columns are returned in the order you specify
them (allow re-ordering of the columns). If you omit this parameter, 
all columns are returned. You may also specify a range of columns
using the syntax C<start:end>.

=item B<--lines>

You may request certain lines to be returned from the file. The 
first row after the header is row 1. You may specify a range with
C<:> and you may select multiple, non-consecutive by separating them
with C<,>. Thus 1:3,8:10 will select rows 1,2,3,8,9, and 10. If
used with C<--select>, only matching lines are counted.

=item B<--rename>

Allows for renaming the output columns. Specify a list of
columns separated by commas. If you do not have a select
statement, the number of names should match the number of
columns in the table; otherwise, the number of new names
should match the number of columns in the select list. You can
alternatively specify a list of columns to rename in the form
C<OldName=NewName> (separated by commas if necessary). 

=item B<--renameearly>

By default, renaming occurs after processing C<--select> and C<--where>.
Add this parameter to the command so renameing happens earlier
allowing you to use the new names in C<--select> and C<--where>.

=item B<--random>

This option allows you select a random subset of the matching lines
from the input file. So specifying C<--random 5 --lines 1:50> will
randomly select 5 lines from the first 50 lines from the file.

=item B<--comment>

Specify the character which indicates the rest of the line is
a comment. By default this is "#".

=item B<--keepcomments>

By default, comments are not returned in the output. By setting
this flag, all comments will be passed through

=item B<--sep>

(optional) You may specify the delimiter used in
the data file. If not specified, the program will look at the
header line. If it finds a tab, it will assume that is the separator. 
If no tabs are found, it will look for commas. If no commas are found,
it will simply assume the delimiter is a space.

=item B<--format>

(optional) This allows you to sepcify how you want the output
to be formatted. You can specify C<C> for "card" format. This
breaks up the columns from the matching row into seperate lines 
where the column name is listed followed by the value in that row. You
can also specify C<L> for "line" format. This will return the data in
a tablular format with fields separated by tabs. The default is 
C<D> which will print in card format if one record is found; 
otherwise if more records are found it will use the line format.

=item B<--noheader>

Use this option if your data file does not have a header line. 
The columns will be automatically named 1,2,3, etc. You can 
give them better names with C<--rename>.  

=item B<--nooutheader>

Use this option to suppress the column names from being written
to the output when using "line" format.

=item B<--help>

Prints a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head2 NOTES

Field names are case sensitive and must match exactly.

When using the default format option, grabbit will wait until a second matching
record is found or the end of the file is reached before printing any
output. If you are searching a large file and are only expecting to find
a single record, you probably want to set the C<--first> option. 

The C<--random> option uses a reservoir sampling technique to choose lines
with a single pass through the data. This requires the entire file to be read.
If you want some random lines from the top of a very large file, try something
like C<--random 4 --lines 1:500>.

You can also specify multiple files to process; the results are combined into one
output file. All the files must have the same header names (though not
necessarily in the same order). Options such as C<--lines> and C<--random> treat
multiple files are if they were a single file cat-ed together.

=head1 EXAMPLES

Assume we have the file pheno.txt:

    #created 8/18/2008
    sampleID,gender,age
    00C01244,M,34
    04C02237,M,45
    99C18124,F,28
    
Running

    grabbit --where sampleID=00C01244 pheno.txt
    
will return:

    sampleID: 00C01244
    gender: M
    age: 34

and running

    grabbit --first pheno.txt
or

    grabbit --lines 1 pheno.txt

will return the same thing in this case.
    
Furthermore, running

    grabbit --where gender=M --select age,gender pheno.txt
    
will return

    age   gender
    34    M
    45    M

To grab a random male, rename the gender column to sex, and 
leave the results in table form, you can run

	grabbit --where gender=M --random 1 --rename gender=sex --format L pheno.txt

which half the time will return

	sampleID	sex	age
	04C02237	M	45


=head1 AUTHOR

Matthew Flickinger (mflick@umich.edu)

=cut

#TODO
# - allow more complex queries

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $sep = "?";
my $select = "";
my $query = "";
my $rename = "";
my $renameEarly = 0;
my $lines = "";
my $firstOnly = "";
my $randomSubset = 0;
my $fileSource = undef;
my $hasInputHeader = 1;
my $includeHeaderOutput = 1;
my $outformat = "D";
my ($help, $man)=(0,0);
my $commentMarker = "#";
my $keepComment = 0;

GetOptions("sep=s" => \$sep,
    "where=s" => \$query,
    "select=s" => \$select,
	"rename=s" => \$rename,
	"renameearly!" => \$renameEarly,
    "lines=s" => \$lines,
    "format=s" => \$outformat,
    "first" => \$firstOnly,
	"random=i" => \$randomSubset,
	"source=s" => \$fileSource,
	"header!" => \$hasInputHeader,
	"outheader!" => \$includeHeaderOutput,
	"comment=s" => \$commentMarker,
	"keepcomments!" => \$keepComment,
    "help|?" => \$help, 
    "man" => \$man);

pod2usage(-verbose => 1) if $help;
pod2usage(-exitstatus => 0, -verbose=>2) if $man;

my ($matchCount, $returned, $printed) = (0, 0, 0);
my (@matchCache, @matchCacheSource, @selcolheads);
my ($lineCheckRef, $maxLine) = parseLineRange($lines);
my ($totalLineCount, $totalFileCount) = (0,0);

if (@ARGV) {
    foreach my $file (@ARGV) {
		if (open(FIN, "< $file")) {
			my $alldone = processFile(*FIN, $file);
			last if $alldone;
		} else {
			print STDERR "Cannot open file $file ($!)\n";
		}
		close(FIN);
	}
	clearCacheAndFinalize(); 
} elsif (!(-t STDIN)) {
	processFile(*STDIN, "stdin");
	clearCacheAndFinalize(); 
} else {
	pod2usage();
}

sub processFile {
	local *FIN = shift;
	my $file = shift;

	$totalFileCount ++;
	my $firstLine = <FIN>;
	if (!defined $firstLine) {
		return 0;
	}
	my @colheads;
	while ($firstLine =~ m/^$commentMarker/) {print $firstLine if $keepComment; $firstLine = <FIN>};
	if ($sep eq "?") {
		my $cnttab = ($firstLine =~ tr/\t/\t/);
		my $cntcomma = ($firstLine =~ tr/,/,/);
		my $cntpipe = ($firstLine =~ tr/\|/\|/);
		if ($cnttab>0) {
			$sep="\t";
		} elsif ($cntcomma>0) {
			$sep=",";
		} elsif ($cntpipe>0) {
			$sep="\\|";
		} else {
			$sep=" ";
		}
	}
	if ($sep ne " ") {
		@colheads = split($sep, $firstLine);
	} else {
		@colheads = split(" ", $firstLine);
	}
	chomp(@colheads);
	collapseQuotes(\@colheads) if $sep eq ",";
	if ($hasInputHeader) {
		$firstLine = "";
	} else {
		@colheads = map($_,1..scalar(@colheads));
	}
	if($fileSource) {
		push @colheads, $fileSource; #add fake column for file name
	}

	my ($qr, $sr, $isOk);
	$isOk = 1;
	$isOk = renameColumns($rename, \@colheads, "") if $rename && $renameEarly;
	die("File: $file\nstopped") if !$isOk;

	($qr, $isOk) = parseQuery($query, \@colheads);
	die("File: $file\nstopped") if !$isOk;

	($sr, $isOk) = parseSelect($select, \@colheads);
	#make sure we read same columns in all subsequent files
	$select = join(",", &$sr(@colheads));
	die("File: $file\nstopped") if !$isOk;

	$isOk = renameColumns($rename, \@colheads, $select) if $rename && !$renameEarly;
	die("File: $file\nstopped") if !$isOk;

	@selcolheads = &$sr(@colheads);
	my $line;
	while((($line = $firstLine) and ($firstLine="")eq"") or defined($line = <FIN>)) {
		if ($line =~ m/^$commentMarker/) {
			print $line if $keepComment;
			next;
		};
		$totalLineCount ++;
		my @c;
		if ($sep eq ",") {
			@c = split($sep, $line);
			collapseQuotes(\@c);
		} elsif ($sep ne " ") {
			@c = split($sep, $line, @colheads);
		} else {
			chomp $line;
			@c = split(" ", $line, @colheads);
		}
		if ($fileSource) {
			push @c, $file;
		}
		chomp @c;
		if( &$qr(@c)) {
			@c = &$sr(@c);
			$matchCount++;
			if (&$lineCheckRef($matchCount)) {
				$returned++;
				if (!$randomSubset) {
					if ($outformat eq "L") {
						printLine(\@selcolheads) if $returned==1 and $includeHeaderOutput;
						printLine(\@c);
						$printed++;
					} elsif ($outformat eq "C") {
						if ($printed > 0) {print "-"x25, "\n";}
						printCard(\@c, \@selcolheads);
						$printed++;
					} elsif ($returned==2 && $outformat eq "D") {
						printLine(\@selcolheads) if $includeHeaderOutput;
						printLine(pop @matchCache);
						printLine(\@c);
						$printed += 2;
						$outformat="L";
					} elsif ($returned==1 && $outformat eq "D") {
						push @matchCache, [@c];
					}
				} else {
					#random subset
					if ($returned <= $randomSubset) {
						push @matchCache, [@c];
						push @matchCacheSource, $matchCount;
					} elsif (rand() < $randomSubset/$returned) {
						my $rep = int(rand(@matchCache));
						$matchCache[$rep] = [@c];
						$matchCacheSource[$rep] = $matchCount;
					}
				}
				last if ($firstOnly and !$randomSubset) or ($maxLine>0 and $matchCount>=$maxLine);
			}
		}
	}
	close(FIN);
	if (($returned and $firstOnly and !$randomSubset) 
		or ($maxLine>0 and $matchCount>=$maxLine)) {
		return 1;
	} else {
		return 0;
	};
}

sub clearCacheAndFinalize {
	if (@matchCache>0) {
		if ($randomSubset) {
			#return records to original order
			my @reorder = sort { $matchCacheSource[$a] <=> $matchCacheSource[$b] } 0..$#matchCache;
			@matchCache = @matchCache[@reorder];
		}
		if (@matchCache==1 && $outformat eq "D") {
			printCard($matchCache[0], \@selcolheads);
		} else {
			printLine(\@selcolheads) if $includeHeaderOutput and $outformat ne "C";
			foreach my $rowref (@matchCache) {
				if ($outformat eq "C") {
					if ($printed >= 1) {print "-"x25, "\n";}
					printCard($rowref, \@selcolheads);
				} else {
					printLine($rowref);
				}
				$printed++;
			}
		}
	}
	if ($returned==0) {
		print STDERR "No matching lines found ($totalLineCount line(s) read in $totalFileCount file(s))\n";
	}
	
}

sub printCard {
    my $dataref = shift;
    my $headref = shift;
    for (my $i=0; $i < @$dataref; $i++) {
        print "$headref->[$i]: $dataref->[$i]\n";
    }
}

sub printLine {
    my $dataref = shift;
    print join("\t", @$dataref), "\n";
}

sub parseLineRange {
    my $rng = shift;
    if (!$rng) {
        return (sub {return 1}, 0);
    }
    my @lineblocks;
    foreach my $grp (split(",", $rng)) {
        if ($grp !~ m/:/) {
            push(@lineblocks, [int($grp), int($grp)]);
        } else {
            my @ss = split(":", $grp);
            if ($ss[1]) {
                #in the form "start:stop"
                push(@lineblocks, [int($ss[0]), int($ss[1])]);
            } else {
                #in the form "start:"  (go to end);
                push(@lineblocks, [int($ss[0]), 0]);
            }
        }
    }
    @lineblocks = sort {$a->[0] cmp $b->[0]} @lineblocks;
    return (sub {
        my $line = shift;
        foreach my $r (@lineblocks) {
            last if $line < $r->[0];
            if($line >= $r->[0] and ($r->[1] == 0 or $line <= $r->[1])) {
                return 1;
                last;
            };
        }
        return 0;
    }, $lineblocks[$#lineblocks]->[1]);
}


sub parseQuery {
    my $q = shift;
    my $cr = shift;
    my %ci = map{ $cr->[$_]=> $_} (0..(scalar(@$cr)-1));
	my $isOk = 1;
    if (!$q) {
        #assume all lines match
        return sub {return 1==1;}, $isOk;
    }
    my ($fld, $val);
    for ($q) {
         ($fld, $val) = m/(.+)\s*=\s*(.+)/;
		 $val = stripMatchedQuote($val);
    }
    if (exists($ci{$fld})) {
        return sub {return $_[$ci{$fld}] eq $val}, $isOk;
    } else {
		$isOk = 0;
        print STDERR "Field [$fld] not found\n";
        printFieldNames($cr, "--where");
        return sub {return 0==1;}, $isOk;
    }
}

sub parseSelect {
    my $q = shift;
    my $cr = shift;
	my $quiet = shift || 0;
	my $isOk = 1;
    if (!$q) {
        return sub {return @_;}, $isOk;
    }
	my $selColsRef;
	($selColsRef, $isOk)= findSelectCols($q, $cr, $quiet);
    return sub {return @_[@$selColsRef]}, $isOk;
}

sub findSelectCols {
	my $q = shift;
	my $cr = shift;
	my $quiet = shift || 0;
	my $isOk = 1;

	my @selCols;
    my %ci = map{ $cr->[$_]=> $_} (0..(scalar(@$cr)-1));
    foreach(split(",", $q)) {
		if (exists $ci{$_}) {
			push(@selCols, $ci{$_});
		} else {
			if (/:/) {
				my @range = split(":");
				if (@range == 2) {
					if (exists $ci{$range[0]} ) {
						if (exists $ci{$range[1]} ) {
							my $cid = $ci{$range[0]};
							my $move = -1*($ci{$range[0]} <=> $ci{$range[1]});
							while(1) {
								push(@selCols, $cid);
								last if $cid==$ci{$range[1]};
								$cid += $move;
							};
						} else {
							$isOk=0;
							print STDERR "Error in range [$_], field $range[1] not found\n" if !$quiet;
						}
					} else {
						$isOk =0;
						print STDERR "Error in range [$_], field $range[0] not found\n" if !$quiet;
					}
				} else {
					$isOk = 0;
					print STDERR "Error in range [$_], expecting start:end\n" if !$quiet;
				}
			} else {
				$isOk = 0;
            	print STDERR "Field [$_] not found\n" if !$quiet;
			}
		}
	}
    printFieldNames($cr, "--select") if !$isOk && !$quiet;
    return \@selCols, $isOk;
}


sub renameColumns {
	my $rename = shift;
	my $colRef = shift;
	my $select = shift;
	my $quiet = shift || 0;
	my $isOk=1;

	my @renCols = split(",", $rename);
	if ($rename =~ /=/) {
		foreach (@renCols) {
			my $found = 0;
         	my ($old, $new) = m/(.+)\s*=\s*(.+)/;
			for(my $i=0; $i<@$colRef; $i++) {
				if ($colRef->[$i] eq $old) {
					$colRef->[$i] = $new;
					$found = 1;
					last;
				}
			}
			if (!$found) {
            	print STDERR "Field [$old] not found\n" if !$quiet;
				$isOk = 0;
			}
		}
    	printFieldNames($colRef, "--rename") if !$isOk && !$quiet;
	} else {
		if ($select) {
			my ($selColRef, $ok) = findSelectCols($select, $colRef, 1);
			if (scalar(@renCols) != scalar(@$selColRef)) {
				print countMismatchError("rename columns", "selected columns",
					\@renCols, $selColRef) if !$quiet;
				$isOk = 0;
				return $isOk;
			}
			for( my $i=0; $i<@$selColRef; $i++) {
				$colRef->[$selColRef->[$i]] = $renCols[$i];
			}
		} else {
			if (scalar(@renCols) != scalar(@$colRef)) {
				print countMismatchError("rename columns", "header columns",
					\@renCols, $colRef) if !$quiet;
				$isOk = 0;
				return $isOk;
			}
			for(my $i=0; $i<@renCols; $i++) {
				$colRef->[$i] = $renCols[$i];
			}
		}
	}
	return $isOk;
}

sub countMismatchError {
	my $ar1type = shift;
	my $ar2type = shift;
	my $ar1 = shift;
	my $ar2 = shift;
	return "Number of $ar1type (", scalar(@$ar1), 
		") does not match number of $ar2type (", scalar(@$ar2), ")\n"; 
}

sub printFieldNames {
    my $cr = shift;
	my $for = shift;
    print STDERR "Valid field names ";
	print STDERR "for $for " if $for;
	print STDERR "are: [", join("][", @$cr), "]\n";
}

sub stripMatchedQuote {
	my $x = shift;
	$x =~ s/^'(.*)'$/$1/;
	$x =~ s/^"(.*)"$/$1/;
	return $x;
}

sub collapseQuotes {
	my $ar = shift;
	my $qstart=-1;
	my $qtype="";
	for(my $i=0; $i<@$ar; $i++) {
		# "real" escape quotes should be in odd bunches
		if ($ar->[$i] =~ /^(["']+)/ && ((length $1) % 2) == 1 ) {
			$qstart = $i;
			$qtype = substr($ar->[$i], 0, 1);
			$ar->[$i] = substr($ar->[$i], 1);
		}
		if ($qstart>=0 && $ar->[$i] =~ /([$qtype]+)$/ && ((length $1) % 2) == 1 ) {
			$ar->[$i] = substr($ar->[$i], 0, length($ar->[$i])-1);
			if ($i != $qstart) {
				splice(@$ar, $qstart, $i-$qstart+1, join(",", @$ar[$qstart..$i]));
				$i = $qstart;
			} 
			$qstart = -1;
		}
	}
}
