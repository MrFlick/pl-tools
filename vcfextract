#!/usr/bin/perl

=head1 NAME

vcfExtract - turns data from a VCF file into a rectangular, tab-delimited file

=head1 SYNOPSIS

vcfExtract [--cols "CHROM,POS,ID"] [--info ""] [--geno "GT"] 
    [--samples samplelist] [--missing ""] [--flagged "+"] [--tall] 
    [--nooutheader] [--help] [-man] file

=head1 DESCRIPTION

vcfExtract allows you to extract a subset of data from a VCF file into
a nice, rectangular format. It will separate the INFO and FORMAT fields
you request into columns. If there is more than one sample, the FORMAT
fields may be prefixed with sample name, or you can use the C<--tall>
option to have each sample go on its own line.

=head2 OPTIONS

=over 4

=item B<--cols>

This a comma-separated list with the names of the "standard" VCF columns (the first seven) 
you want from the file

=item B<--info>

This is a comma separated list of the INFO fields you would like to pull from 
each row. If a row does not that that information, the value of C<--missing> will
be returned. If the info is just a flag (ie just KEY, rather than KEY=VAL) then
the value of C<--flagged> is returned.

=item B<--geno>

This is a comma-separated list of the genotype fields you would like. If set to
"" then no genotype data is returned. The default is "GT".

=item B<--samples>

You may optionally provide a comma-separated list of sample names (that must match the
header row). If left blank, the genotype data for all samples will be returned.

=item B<--missing>

This is the value returned which a INFO or FORMAT field is not found for a given row.

=item B<--flagged>

Most INFO values are in the form KEY=VAL, but if just a KEY is found, then this is the
value returned for this column; otherwise the value of C<--missing> will be returned.

=item B<--tall>

Using this option will print only one sample per line, and will add a column to each
row with the name of that sample.

=item B<--nooutheader>

This will not put a header on the output

=item B<--help>

Prints a breif help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 AUTHOR

Matthew Flickinger (mflick@umich.edu)

=cut

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $standardFields = "CHROM,POS,ID";
my $infoFields = "";
my $genoFields = "GT";
my $sampleNames = "";
my $tall = 0;
my $ifMissing = "";
my $ifFlagged = "+";
my $showOutHeader = 1;
my ($help, $man) = (0,0);

GetOptions("info=s" => \$infoFields,
	"cols=s" => \$standardFields,
	"geno=s" => \$genoFields,
	"samples=s" => \$sampleNames,
	"tall" => \$tall,
	"missing=s" => \$ifMissing,
    "outheader!" => \$showOutHeader,
	"flag=s" => \$ifFlagged,
	"help|?" => \$help,
	"man" => \$man);

pod2usage(-verbose => 1) if $help;
pod2usage(-exitstatus => 0, -verbose=>2) if $man;

my @standardFields = split(",", $standardFields);
my @infoFields = split(",", $infoFields);
my @genoFields = split(",", $genoFields);
my @sampleNames = split(",", $sampleNames);

if (@ARGV) {
    my $file = shift @ARGV;
    print STDERR "WARNING: this will only work in the first file listed ($file)\n" if @ARGV;
    if ($file =~ m/.gz$/) {
        open(FIN, "zcat $file |") or die("cannot open file $file ($!), stopped");
    } else {
        open(FIN, "< $file") or die("cannot open file $file ($!), stopped");
    }
    processFile(*FIN);
    close(FIN);
} elsif (!(-t STDIN)) {
    processFile(*STDIN);
} else {
    pod2usage();
}

sub processFile {
    my $header="";
    my $lineNumber=0;
    my $colIdxRef;
    my $standardIdxRef;
	local *FIN = shift;
	while (<FIN>) {
		chomp;
		next if /^##/;
		if (!$header) {
            $header = $_; 
			($colIdxRef, $standardIdxRef) = readHeader($header, \@standardFields, \@sampleNames);
			writeHeader(\@standardFields, \@infoFields, \@genoFields, \@sampleNames, $tall) if $showOutHeader;
			next;
		}
		$lineNumber++;
		my @cols = split("\t");
		if ($tall) {
			writeTallLine(\@cols, $colIdxRef, $standardIdxRef, \@infoFields, \@genoFields, \@sampleNames);
		} else {
			writeWideLine(\@cols, $colIdxRef, $standardIdxRef, \@infoFields, \@genoFields, \@sampleNames);
		}
	}
}

sub readHeader {
	my $header = shift;
    my $standardRef = shift;
    my $sampleRef = shift;
    my %colIndexes;

    $header =~ s/^#//g;
    print STDERR "WARNING: File does not appear to be tab-delimited\n" if $header !~ /\t/;
	my @colHeaders = split("\t", $header);
    %colIndexes = map{ $colHeaders[$_] => $_} (0..$#colHeaders);

    my @standardIndexes;

	my $isOk=1;
	foreach my $std (@$standardRef) {
		if (exists($colIndexes{$std})) {
			push @standardIndexes, $colIndexes{$std};
		} else {
			print STDERR "ERROR: column $std not found in file\n";
			$isOk=0;
		}
	}
    if (!$isOk) {
        print STDERR "INFO: found ", scalar(@colHeaders),
            " column(s): [", join("][", @colHeaders), "]\n";
        die("ERROR: some columns not found, stopped");
    }
    if( $#$sampleRef>=0) {
        foreach my $sample (@$sampleRef) {
            if (!exists($colIndexes{$sample})) {
                print STDERR "ERROR: sample name $sample not found in file\n";
                $isOk=0;
            }
        }
        if (!$isOk) {
            print STDERR "INFO: found ", scalar(@colHeaders),
                " column(s): [", join("][", @colHeaders), "]\n";
            die("ERROR: some samples not found, stopped");
        }
    } else {
        if (exists($colIndexes{"FORMAT"})) {
            for(my $i=$colIndexes{"FORMAT"}+1; $i<@colHeaders; $i++) {
                push @$sampleRef, $colHeaders[$i];
            }
        }
    }
    return \%colIndexes, \@standardIndexes;
}

sub writeHeader {
    my ($standardRef, $infoRef, $genoRef, $sampleRef, $isTall) = @_;
    my @headers = (@$standardRef, @$infoRef);
    if ($isTall) {
        @headers=("SAMPLE",@headers, @$genoRef);
    } else {
        if (scalar(@$sampleRef)>1) {
            if (scalar(@$genoRef)>1) {
                #many geno, many samples; use sample:geno
                for(my $s=0; $s<@$sampleRef; $s++) {
                    for(my $i=0; $i<@$genoRef; $i++) {
                        push @headers, $sampleRef->[$s].":".$genoRef->[$i];
                    }
                }
            } elsif (scalar(@$genoRef)==1) {
                #one geno, many samples; use sample names
                push @headers, @$sampleRef;
            }
        } else {
            #one sample; use geno name(s)
            push @headers, @$genoRef;
        }
    }
	print join("\t", @headers), "\n";
}

sub writeTallLine {
    my ($dataRef, $indexRef, $standardRef, $infoRef, $genoRef, $sampleRef) = @_;
	foreach my $sample(@$sampleRef) {
		print $sample;
		print "\t", join("\t", @$dataRef[@$standardRef]) if scalar(@$standardRef);
		print "\t", join("\t",extractInfo($dataRef->[$indexRef->{"INFO"}], $infoRef)) if scalar(@$infoRef);
		print "\t", join("\t",extractGeno($dataRef->[$indexRef->{"FORMAT"}], 
			$dataRef->[$indexRef->{$sample}], $genoRef)) if scalar(@$genoRef);
		print "\n";
	}
}

sub writeWideLine {
    my ($dataRef, $indexRef, $standardRef, $infoRef, $genoRef, $sampleRef) = @_;
	my $needTab = 0;
	if (scalar(@$standardRef)) {
		print join("\t", @$dataRef[@$standardRef]);
		$needTab = 1;
	}
	if (scalar(@$infoRef)) {
		print "\t" if $needTab;
		print join("\t",extractInfo($dataRef->[$indexRef->{"INFO"}], $infoRef));
		$needTab = 1;
	}
	foreach my $sample (@$sampleRef) {
		print "\t" if $needTab;
		print join("\t",extractGeno($dataRef->[$indexRef->{"FORMAT"}], 
			$dataRef->[$indexRef->{$sample}], $genoRef));
		$needTab = 1;
	}
	print "\n";
}


sub extractInfo {
    my $info = shift;
    my $fieldRef = shift;

	my $infoDictRef = createInfoDict($info);
    my @cols;
    foreach (@$fieldRef) {
        if (exists $infoDictRef->{$_}) {
            push @cols, $infoDictRef->{$_};
        } else {
            push @cols, $ifMissing;
        }
    }
    return @cols;
}

sub createInfoDict {
	my $info = shift;

    my @infos = split(";", $info);
    my %infos;
    foreach(@infos) {
        if (/=/) {
            my ($fld, $val) = m/(.*)\s*=\s*(.*)/;
            $infos{$fld} = $val;
        } else {
            $infos{$_} = $ifFlagged;
        }
    }
	return \%infos;
}

sub extractGeno {
    my $format = shift;
    my $geno = shift;
    my $fieldRef = shift;

    my $genoDictRef = createGenoDict($format, $geno);  
    my @cols;
    foreach (@$fieldRef) {
		if (exists $genoDictRef->{$_}) {
			push @cols, $genoDictRef->{$_};
		} else {
			push @cols, $ifMissing;
		}
    }
    return @cols;
}

sub createGenoDict {
	my $format = shift;
	my $geno = shift;

    my @formats = split(":", $format);
    my @genos = split(":", $geno);
    my %genos;
    for(my $i = 0; $i < @formats; $i++) {
        $genos{$formats[$i]} = $genos[$i];
    }  
	return \%genos;
}
